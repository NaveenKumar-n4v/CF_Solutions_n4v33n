#include <bits/stdc++.h>
#include <iostream>
// #include <string_view>
#include <string>
using namespace std;
#define endl "\n"
#define ll long long
#define array_size(type) ((char *)(&type+1)-(char*)(&type))
#define MOD 1000000007
// @defin
#define mod 998244353
#ifndef ONLINE_JUDGE
#define debug(x) cerr<<#x<<" "<<x<<endl;
#else
#define debug(x)
#endif
template<typename KeyType, typename ValueType>
std::pair<KeyType, ValueType> get_max( const std::map<KeyType, ValueType>& x ) {
	using pairtype = std::pair<KeyType, ValueType>;
	return *std::max_element(x.begin(), x.end(), [] (const pairtype & p1, const pairtype & p2) {
		return p1.second < p2.second;
	});
}
// Readme.me // CLUE HIDDEN IN STORY // PATTERN == {Practice}
ll n;
void solve() {
	cin >> n;
	vector<ll> v(n);
	for (int i = 0; i < n; ++i)
	{
		cin >> v[i];
	}
	sort(v.begin(), v.end());
	vector<bool>bool_vec(n + 1, false);
	for (int i = 0; i < n; ++i)
	{
		// debug(i)
		if (v[i] <= n) {
			if (bool_vec[v[i]] == false) {
				bool_vec[v[i]] = true;
			}
			else {
				while (v[i] && bool_vec[v[i]] == true) {
					v[i] /= 2;
				}
				// debug(v[i])
				bool_vec[v[i]] = true;
			}
		}
		else {
			while (v[i] > n) {
				v[i] /= 2;
			}
			// debug(v[i])
			// cout<<i<<" "<<v[i]<<endl;
			if (bool_vec[v[i]] == false) {
				bool_vec[v[i]] = true;
			}
			else {
				while (v[i] && bool_vec[v[i]] == true) {
					v[i] /= 2;
				}
				bool_vec[v[i]] = true;
			}
			// cout<<a[i]<<" ";
			// debug(a[i])
		}
		// cerr<<i<<endl;
	}
	for (int i = 1; i <= n; i++) {
		if (bool_vec[i] == false) {
			cout << "NO" << endl;
			return;
		}
	}
	cout << "YES" << endl;
}
signed main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("error.txt", "w", stderr);
#endif
	ll t = 1;
	cin >> t;
	while (t--) solve();
	return 0;
}

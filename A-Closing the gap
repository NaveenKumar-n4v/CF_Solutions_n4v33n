#include <bits/stdc++.h>
#include <iostream>
// #include <string_view>
#include <string>
using namespace std;
#define endl "\n"
#define ll long long
#define array_size(type) ((char *)(&type+1)-(char*)(&type))
#define MOD 1000000007
#ifndef ONLINE_JUDGE
#define debug(x) cerr<<#x<<" "<<x<<endl;
#else
#define debug(x)
#endif
template<typename KeyType, typename ValueType>
std::pair<KeyType, ValueType> get_max( const std::map<KeyType, ValueType>& x ) {
	using pairtype = std::pair<KeyType, ValueType>;
	return *std::max_element(x.begin(), x.end(), [] (const pairtype & p1, const pairtype & p2) {
		return p1.second < p2.second;
	});
}
// Readme.me // CLUE HIDDEN IN STORY // PATTERN == {Practice}
void solve() {
	ll n;
	cin >> n;
	ll cnt = 0;
	vector<ll>v;
	ll w[n];
	for (int i = 0; i < n; ++i)
	{
		// ll w;
		cin >> w[i];
		v.push_back(w[i]);
		// cnt += w;
	}
	ll mx = 0;
	mx = accumulate(w, w + n, mx);
	// debug(max)
	// cout << mx << endl;
	// cnt = accumulate(v.begin(), v.end(), cnt);
	cout << (mx % n == 0 ? "0" : "1") << endl;
 
}
signed main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("error.txt", "w", stderr);
#endif
	ll t = 1;
	cin >> t;
	while (t--) solve();
	return 0;
}
